from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
import logging
import pytz
from datetime import datetime

# –õ–æ–≥—Ç–∞—Ä–¥—ã –±–∞–ø—Ç–∞—É
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –¢–æ–∫–µ–Ω–¥—ñ –æ—Å—ã–Ω–¥–∞ “õ–æ–π (–∂–µ–∫–µ —Å–∞“õ—Ç–∞!)
TOKEN = "8178613284:AAHAx7YftQC9zHyL3OouPepT3jBSZYcw8Sg"

# –ë—Ä–æ–Ω–¥–∞—É “Ø—à—ñ–Ω –∫“Ø–π–ª–µ—Ä
SELECT_DATE, SELECT_TIME, SELECT_PEOPLE = range(3)

# –ë–∞—Å—Ç–∞—É –∫–æ–º–∞–Ω–¥–∞—Å—ã
async def start(update: Update, context):
    await update.message.reply_text(
        "–°”ô–ª–µ–º! –ë“±–ª Cafe Nur –±—Ä–æ–Ω–¥–∞—É –±–æ—Ç—ã. –û—Ä—ã–Ω –±—Ä–æ–Ω–¥–∞—É “Ø—à—ñ–Ω /book –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑."
    )

# –ë—Ä–æ–Ω–¥–∞—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω –±–∞—Å—Ç–∞—É
async def book(update: Update, context):
    await update.message.reply_text("“ö–∞–π –∫“Ø–Ω–≥–µ –±—Ä–æ–Ω–¥–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? (–ö“Ø–Ω—ñ: –ö–ö/AA/YYYY)")
    return SELECT_DATE

# –ö“Ø–Ω–¥—ñ —Ç–∞“£–¥–∞—É
async def select_date(update: Update, context):
    user_date = update.message.text
    try:
        datetime.strptime(user_date, "%d/%m/%Y")  # –î“±—Ä—ã—Å —Ñ–æ—Ä–º–∞—Ç –ø–∞, —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–∑
        context.user_data["date"] = user_date
        await update.message.reply_text("“ö–∞–π —É–∞“õ—ã—Ç“õ–∞ –±—Ä–æ–Ω–¥–∞–π—Å—ã–∑? (–ú—ã—Å–∞–ª—ã: 18:30)")
        return SELECT_TIME
    except ValueError:
        await update.message.reply_text("–ö“Ø–Ω–¥—ñ –¥“±—Ä—ã—Å —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–ö–ö/AA/YYYY).")
        return SELECT_DATE

# –£–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞—É
async def select_time(update: Update, context):
    user_time = update.message.text
    try:
        datetime.strptime(user_time, "%H:%M")  # –î“±—Ä—ã—Å —Ñ–æ—Ä–º–∞—Ç –ø–∞, —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–∑
        context.user_data["time"] = user_time
        await update.message.reply_text("“ö–∞–Ω—à–∞ –∞–¥–∞–º“ì–∞ –æ—Ä—ã–Ω –±—Ä–æ–Ω–¥–∞–π—Å—ã–∑?")
        return SELECT_PEOPLE
    except ValueError:
        await update.message.reply_text("–£–∞“õ—ã—Ç—Ç—ã –¥“±—Ä—ã—Å —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (HH:MM).")
        return SELECT_TIME

# –ê–¥–∞–º —Å–∞–Ω—ã–Ω —Ç–∞“£–¥–∞—É
async def select_people(update: Update, context):
    people_count = update.message.text
    if not people_count.isdigit():
        await update.message.reply_text("–¢–µ–∫ —Å–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")
        return SELECT_PEOPLE

    context.user_data["people"] = people_count
    date = context.user_data["date"]
    time = context.user_data["time"]

    await update.message.reply_text(
        f"–ë—Ä–æ–Ω–¥–∞—É —Ä–∞—Å—Ç–∞–ª–¥—ã!\nüìÖ –ö“Ø–Ω—ñ: {date}\n‚è∞ –£–∞“õ—ã—Ç—ã: {time}\nüë• –ê–¥–∞–º —Å–∞–Ω—ã: {people_count}"
    )
    return ConversationHandler.END

# –ë–æ–ª–¥—ã—Ä–º–∞—É
async def cancel(update: Update, context):
    await update.message.reply_text("–ë—Ä–æ–Ω–¥–∞—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("book", book)],
        states={
            SELECT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_date)],
            SELECT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_time)],
            SELECT_PEOPLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_people)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("‚úÖ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    app.run_polling()

if __name__ == "__main__":
    main()
